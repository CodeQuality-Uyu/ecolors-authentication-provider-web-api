// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CQ.AuthProvider.Postgres.Migrations.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountApp", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasKey("AppId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsApps");

                    b.HasData(
                        new
                        {
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            AccountId = new Guid("0ee82ee9-f480-4b13-ad68-579dc83dfa0d")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ee82ee9-f480-4b13-ad68-579dc83dfa0d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "seed@cq.com",
                            FirstName = "Seed",
                            FullName = "Seed Seed",
                            LastName = "Seed",
                            Locale = "Uruguay",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c"),
                            TimeZone = "-3"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("77f7ff91-a807-43ac-bc76-1b34c52c5345"),
                            AccountId = new Guid("0ee82ee9-f480-4b13-ad68-579dc83dfa0d")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<Guid?>("BackgroundCoverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uuid");

                    b.Property<int>("DefaultCoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("FatherAppId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FatherAppId");

                    b.HasIndex("TenantId");

                    b.ToTable("Apps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            BackgroundColor = "{\"Colors\":[\"#FFFFFF\"],\"Config\":\"linear-gradient(310g, {{colors}})\"}",
                            CoverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DefaultCoin = 0,
                            IsDefault = true,
                            Name = "Auth Provider Web Api",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Invitations.InvitationEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("TenantId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32b32564-459f-4e74-8456-83147bd03c9e"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create permissions",
                            IsPublic = true,
                            Key = "create-permission",
                            Name = "Create permission",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("bcb925af-f4be-4782-978c-c496b044609f"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read permissions",
                            IsPublic = true,
                            Key = "getall-permission",
                            Name = "Can read permissions",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("e38a9a3a-dea3-46d5-a7a8-d5e9ea882e15"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create several permissions at once",
                            IsPublic = true,
                            Key = "createbulk-permission",
                            Name = "Create permission in bulk",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("ec6141a0-d0f7-4102-b41c-c8d50a86e3a9"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create roles",
                            IsPublic = true,
                            Key = "create-role",
                            Name = "Can create role",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("fc598ab0-1f14-4224-a187-4556a9926f6f"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read roles",
                            IsPublic = true,
                            Key = "getall-role",
                            Name = "Can read roles",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("c402e13f-40c4-4b97-b004-d5e616c3f82d"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can add permissions to role",
                            IsPublic = true,
                            Key = "addpermission-role",
                            Name = "Can add permissions to role",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("40bc0960-8c55-488e-a014-f5b52db3d306"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read invitations of tenant",
                            IsPublic = true,
                            Key = "getall-invitation",
                            Name = "Can read invitations of tenant",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("0b2f5e97-42f9-4e56-9ee2-40b033cff9e8"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create invitations",
                            IsPublic = true,
                            Key = "create-invitation",
                            Name = "Can create invitations",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("45104ffc-433c-42bc-a887-18d71d2bc524"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create tenant",
                            IsPublic = true,
                            Key = "create-tenant",
                            Name = "Can create tenant",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("06f5a862-9cfd-4c1f-a777-4c4b3adb916b"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can update tenant name",
                            IsPublic = true,
                            Key = "updatetenantname-me",
                            Name = "Can update tenant name",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("a43d40d7-7aa6-4abb-a124-890d7218ac86"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can update tenant owner",
                            IsPublic = true,
                            Key = "transfertenant-me",
                            Name = "Can update tenant owner",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("216b14a3-337a-45a6-a75d-cae870a73918"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read all tenants",
                            IsPublic = true,
                            Key = "getall-tenants",
                            Name = "Can read all tenants",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("2eab3c3a-792a-444a-97f3-01db00dffcab"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create app",
                            IsPublic = true,
                            Key = "create-app",
                            Name = "Can create app",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("6323b5da-b78c-4984-a56e-8206775d3e91"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read apps of tenant",
                            IsPublic = true,
                            Key = "getall-app",
                            Name = "Can read apps",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("cfd3f238-a446-4f4f-81f0-f770974f0cc3"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can update colors of app in tenant",
                            IsPublic = true,
                            Key = "updatecolors-app",
                            Name = "Can update colors of app",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("43da8440-39be-46cc-b8fe-da34961d2486"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read clients of tenant",
                            IsPublic = true,
                            Key = "getall-client",
                            Name = "Can read clients",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("87013d07-c8ba-48f1-bb8c-510b7836fe1f"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create clients of tenant",
                            IsPublic = true,
                            Key = "create-client",
                            Name = "Can create clients",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("27c1378d-39df-4a57-b025-fc96963955a6"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can read all accounts",
                            IsPublic = true,
                            Key = "getall-account",
                            Name = "Can read all accounts",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("046c65a8-d3c1-41d7-bda2-a96d393cc18e"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Can create accounts",
                            IsPublic = true,
                            Key = "createcredentialsfor-account",
                            Name = "Can create accounts",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("c0a55e4b-b24d-42a4-90e4-f828e2b8e098"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Update roles of account. Roles of tenant and of apps of user logged",
                            IsPublic = true,
                            Key = "updateroles-account",
                            Name = "Update roles of account",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.ResetPasswords.ResetPasswordEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswords");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Tenant Owner",
                            IsDefault = false,
                            IsPublic = true,
                            Name = "Tenant Owner",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("77f7ff91-a807-43ac-bc76-1b34c52c5345"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Should be deleted once used",
                            IsDefault = false,
                            IsPublic = false,
                            Name = "Seed",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("780a89b1-9fd3-4cf6-b802-2882ebb3db92"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Permissions over Auth Provider Web Api app",
                            IsDefault = false,
                            IsPublic = true,
                            Name = "Auth Provider Web Api Owner",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "App owner",
                            IsDefault = false,
                            IsPublic = true,
                            Name = "App owner",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        },
                        new
                        {
                            Id = new Guid("01e55142-6b8c-4e7e-9d71-1e459d07796d"),
                            AppId = new Guid("f4ad89eb-6a0b-427a-8aef-b6bc736884dc"),
                            Description = "Owner of an app that is client of other App",
                            IsDefault = false,
                            IsPublic = true,
                            Name = "Client owner",
                            TenantId = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("77f7ff91-a807-43ac-bc76-1b34c52c5345"),
                            PermissionId = new Guid("046c65a8-d3c1-41d7-bda2-a96d393cc18e")
                        },
                        new
                        {
                            RoleId = new Guid("77f7ff91-a807-43ac-bc76-1b34c52c5345"),
                            PermissionId = new Guid("fc598ab0-1f14-4224-a187-4556a9926f6f")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("32b32564-459f-4e74-8456-83147bd03c9e")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("bcb925af-f4be-4782-978c-c496b044609f")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("e38a9a3a-dea3-46d5-a7a8-d5e9ea882e15")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("ec6141a0-d0f7-4102-b41c-c8d50a86e3a9")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("fc598ab0-1f14-4224-a187-4556a9926f6f")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("c402e13f-40c4-4b97-b004-d5e616c3f82d")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("0b2f5e97-42f9-4e56-9ee2-40b033cff9e8")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("40bc0960-8c55-488e-a014-f5b52db3d306")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("45104ffc-433c-42bc-a887-18d71d2bc524")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("06f5a862-9cfd-4c1f-a777-4c4b3adb916b")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("a43d40d7-7aa6-4abb-a124-890d7218ac86")
                        },
                        new
                        {
                            RoleId = new Guid("780a89b1-9fd3-4cf6-b802-2882ebb3db92"),
                            PermissionId = new Guid("216b14a3-337a-45a6-a75d-cae870a73918")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("27c1378d-39df-4a57-b025-fc96963955a6")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("046c65a8-d3c1-41d7-bda2-a96d393cc18e")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("c0a55e4b-b24d-42a4-90e4-f828e2b8e098")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("2eab3c3a-792a-444a-97f3-01db00dffcab")
                        },
                        new
                        {
                            RoleId = new Guid("cf4a209a-8dbd-4dac-85d9-ed899424b49e"),
                            PermissionId = new Guid("6323b5da-b78c-4984-a56e-8206775d3e91")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("cfd3f238-a446-4f4f-81f0-f770974f0cc3")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("ec6141a0-d0f7-4102-b41c-c8d50a86e3a9")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("fc598ab0-1f14-4224-a187-4556a9926f6f")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("87013d07-c8ba-48f1-bb8c-510b7836fe1f")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("43da8440-39be-46cc-b8fe-da34961d2486")
                        },
                        new
                        {
                            RoleId = new Guid("4579a206-b6c7-4d58-9d36-c3e0923041b5"),
                            PermissionId = new Guid("046c65a8-d3c1-41d7-bda2-a96d393cc18e")
                        },
                        new
                        {
                            RoleId = new Guid("01e55142-6b8c-4e7e-9d71-1e459d07796d"),
                            PermissionId = new Guid("cfd3f238-a446-4f4f-81f0-f770974f0cc3")
                        },
                        new
                        {
                            RoleId = new Guid("01e55142-6b8c-4e7e-9d71-1e459d07796d"),
                            PermissionId = new Guid("ec6141a0-d0f7-4102-b41c-c8d50a86e3a9")
                        },
                        new
                        {
                            RoleId = new Guid("01e55142-6b8c-4e7e-9d71-1e459d07796d"),
                            PermissionId = new Guid("fc598ab0-1f14-4224-a187-4556a9926f6f")
                        },
                        new
                        {
                            RoleId = new Guid("01e55142-6b8c-4e7e-9d71-1e459d07796d"),
                            PermissionId = new Guid("046c65a8-d3c1-41d7-bda2-a96d393cc18e")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Sessions.SessionEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AppId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverLogoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MiniLogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("882a262c-e1a7-411d-a26e-40c61f3b810c"),
                            CoverLogoId = new Guid("d7cb8b70-f3e9-4ffa-a963-c72942a7f65b"),
                            MiniLogoId = new Guid("0f491b27-2a93-479a-b674-5c49db77f05c"),
                            Name = "Seed Tenant",
                            OwnerId = new Guid("0ee82ee9-f480-4b13-ad68-579dc83dfa0d")
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountApp", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany("Accounts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "FatherApp")
                        .WithMany()
                        .HasForeignKey("FatherAppId");

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FatherApp");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Invitations.InvitationEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Creator");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany("Permissions")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.ResetPasswords.ResetPasswordEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany("Roles")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Sessions.SessionEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
